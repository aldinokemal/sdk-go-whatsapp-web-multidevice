/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the PinChatResponseResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PinChatResponseResults{}

// PinChatResponseResults struct for PinChatResponseResults
type PinChatResponseResults struct {
	Status *string `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
	ChatJid *string `json:"chat_jid,omitempty"`
	Pinned *bool `json:"pinned,omitempty"`
}

// NewPinChatResponseResults instantiates a new PinChatResponseResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinChatResponseResults() *PinChatResponseResults {
	this := PinChatResponseResults{}
	return &this
}

// NewPinChatResponseResultsWithDefaults instantiates a new PinChatResponseResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinChatResponseResultsWithDefaults() *PinChatResponseResults {
	this := PinChatResponseResults{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PinChatResponseResults) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinChatResponseResults) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PinChatResponseResults) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PinChatResponseResults) SetStatus(v string) {
	o.Status = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *PinChatResponseResults) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinChatResponseResults) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *PinChatResponseResults) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *PinChatResponseResults) SetMessage(v string) {
	o.Message = &v
}

// GetChatJid returns the ChatJid field value if set, zero value otherwise.
func (o *PinChatResponseResults) GetChatJid() string {
	if o == nil || IsNil(o.ChatJid) {
		var ret string
		return ret
	}
	return *o.ChatJid
}

// GetChatJidOk returns a tuple with the ChatJid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinChatResponseResults) GetChatJidOk() (*string, bool) {
	if o == nil || IsNil(o.ChatJid) {
		return nil, false
	}
	return o.ChatJid, true
}

// HasChatJid returns a boolean if a field has been set.
func (o *PinChatResponseResults) HasChatJid() bool {
	if o != nil && !IsNil(o.ChatJid) {
		return true
	}

	return false
}

// SetChatJid gets a reference to the given string and assigns it to the ChatJid field.
func (o *PinChatResponseResults) SetChatJid(v string) {
	o.ChatJid = &v
}

// GetPinned returns the Pinned field value if set, zero value otherwise.
func (o *PinChatResponseResults) GetPinned() bool {
	if o == nil || IsNil(o.Pinned) {
		var ret bool
		return ret
	}
	return *o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PinChatResponseResults) GetPinnedOk() (*bool, bool) {
	if o == nil || IsNil(o.Pinned) {
		return nil, false
	}
	return o.Pinned, true
}

// HasPinned returns a boolean if a field has been set.
func (o *PinChatResponseResults) HasPinned() bool {
	if o != nil && !IsNil(o.Pinned) {
		return true
	}

	return false
}

// SetPinned gets a reference to the given bool and assigns it to the Pinned field.
func (o *PinChatResponseResults) SetPinned(v bool) {
	o.Pinned = &v
}

func (o PinChatResponseResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PinChatResponseResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.ChatJid) {
		toSerialize["chat_jid"] = o.ChatJid
	}
	if !IsNil(o.Pinned) {
		toSerialize["pinned"] = o.Pinned
	}
	return toSerialize, nil
}

type NullablePinChatResponseResults struct {
	value *PinChatResponseResults
	isSet bool
}

func (v NullablePinChatResponseResults) Get() *PinChatResponseResults {
	return v.value
}

func (v *NullablePinChatResponseResults) Set(val *PinChatResponseResults) {
	v.value = val
	v.isSet = true
}

func (v NullablePinChatResponseResults) IsSet() bool {
	return v.isSet
}

func (v *NullablePinChatResponseResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinChatResponseResults(val *PinChatResponseResults) *NullablePinChatResponseResults {
	return &NullablePinChatResponseResults{value: val, isSet: true}
}

func (v NullablePinChatResponseResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinChatResponseResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


