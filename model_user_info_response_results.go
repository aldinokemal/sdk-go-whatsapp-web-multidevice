/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 3.5.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk-go-whatsapp-web-multidevice

import (
	"encoding/json"
)

// checks if the UserInfoResponseResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserInfoResponseResults{}

// UserInfoResponseResults struct for UserInfoResponseResults
type UserInfoResponseResults struct {
	VerifiedName *string `json:"verified_name,omitempty"`
	Status *string `json:"status,omitempty"`
	PictureId *string `json:"picture_id,omitempty"`
	Devices []UserInfoResponseResultsDevicesInner `json:"devices,omitempty"`
}

// NewUserInfoResponseResults instantiates a new UserInfoResponseResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserInfoResponseResults() *UserInfoResponseResults {
	this := UserInfoResponseResults{}
	return &this
}

// NewUserInfoResponseResultsWithDefaults instantiates a new UserInfoResponseResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserInfoResponseResultsWithDefaults() *UserInfoResponseResults {
	this := UserInfoResponseResults{}
	return &this
}

// GetVerifiedName returns the VerifiedName field value if set, zero value otherwise.
func (o *UserInfoResponseResults) GetVerifiedName() string {
	if o == nil || IsNil(o.VerifiedName) {
		var ret string
		return ret
	}
	return *o.VerifiedName
}

// GetVerifiedNameOk returns a tuple with the VerifiedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfoResponseResults) GetVerifiedNameOk() (*string, bool) {
	if o == nil || IsNil(o.VerifiedName) {
		return nil, false
	}
	return o.VerifiedName, true
}

// HasVerifiedName returns a boolean if a field has been set.
func (o *UserInfoResponseResults) HasVerifiedName() bool {
	if o != nil && !IsNil(o.VerifiedName) {
		return true
	}

	return false
}

// SetVerifiedName gets a reference to the given string and assigns it to the VerifiedName field.
func (o *UserInfoResponseResults) SetVerifiedName(v string) {
	o.VerifiedName = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *UserInfoResponseResults) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfoResponseResults) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *UserInfoResponseResults) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *UserInfoResponseResults) SetStatus(v string) {
	o.Status = &v
}

// GetPictureId returns the PictureId field value if set, zero value otherwise.
func (o *UserInfoResponseResults) GetPictureId() string {
	if o == nil || IsNil(o.PictureId) {
		var ret string
		return ret
	}
	return *o.PictureId
}

// GetPictureIdOk returns a tuple with the PictureId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfoResponseResults) GetPictureIdOk() (*string, bool) {
	if o == nil || IsNil(o.PictureId) {
		return nil, false
	}
	return o.PictureId, true
}

// HasPictureId returns a boolean if a field has been set.
func (o *UserInfoResponseResults) HasPictureId() bool {
	if o != nil && !IsNil(o.PictureId) {
		return true
	}

	return false
}

// SetPictureId gets a reference to the given string and assigns it to the PictureId field.
func (o *UserInfoResponseResults) SetPictureId(v string) {
	o.PictureId = &v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *UserInfoResponseResults) GetDevices() []UserInfoResponseResultsDevicesInner {
	if o == nil || IsNil(o.Devices) {
		var ret []UserInfoResponseResultsDevicesInner
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserInfoResponseResults) GetDevicesOk() ([]UserInfoResponseResultsDevicesInner, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *UserInfoResponseResults) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []UserInfoResponseResultsDevicesInner and assigns it to the Devices field.
func (o *UserInfoResponseResults) SetDevices(v []UserInfoResponseResultsDevicesInner) {
	o.Devices = v
}

func (o UserInfoResponseResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserInfoResponseResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VerifiedName) {
		toSerialize["verified_name"] = o.VerifiedName
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.PictureId) {
		toSerialize["picture_id"] = o.PictureId
	}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	return toSerialize, nil
}

type NullableUserInfoResponseResults struct {
	value *UserInfoResponseResults
	isSet bool
}

func (v NullableUserInfoResponseResults) Get() *UserInfoResponseResults {
	return v.value
}

func (v *NullableUserInfoResponseResults) Set(val *UserInfoResponseResults) {
	v.value = val
	v.isSet = true
}

func (v NullableUserInfoResponseResults) IsSet() bool {
	return v.isSet
}

func (v *NullableUserInfoResponseResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserInfoResponseResults(val *UserInfoResponseResults) *NullableUserInfoResponseResults {
	return &NullableUserInfoResponseResults{value: val, isSet: true}
}

func (v NullableUserInfoResponseResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserInfoResponseResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


