/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 4.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk_go_whatsapp_web_multidevice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateMessageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateMessageRequest{}

// UpdateMessageRequest struct for UpdateMessageRequest
type UpdateMessageRequest struct {
	// Phone number with country code
	Phone string `json:"phone"`
	// New message to send
	Message string `json:"message"`
}

type _UpdateMessageRequest UpdateMessageRequest

// NewUpdateMessageRequest instantiates a new UpdateMessageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateMessageRequest(phone string, message string) *UpdateMessageRequest {
	this := UpdateMessageRequest{}
	this.Phone = phone
	this.Message = message
	return &this
}

// NewUpdateMessageRequestWithDefaults instantiates a new UpdateMessageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateMessageRequestWithDefaults() *UpdateMessageRequest {
	this := UpdateMessageRequest{}
	return &this
}

// GetPhone returns the Phone field value
func (o *UpdateMessageRequest) GetPhone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageRequest) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phone, true
}

// SetPhone sets field value
func (o *UpdateMessageRequest) SetPhone(v string) {
	o.Phone = v
}

// GetMessage returns the Message field value
func (o *UpdateMessageRequest) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *UpdateMessageRequest) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *UpdateMessageRequest) SetMessage(v string) {
	o.Message = v
}

func (o UpdateMessageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateMessageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["phone"] = o.Phone
	toSerialize["message"] = o.Message
	return toSerialize, nil
}

func (o *UpdateMessageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"phone",
		"message",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateMessageRequest := _UpdateMessageRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateMessageRequest)

	if err != nil {
		return err
	}

	*o = UpdateMessageRequest(varUpdateMessageRequest)

	return err
}

type NullableUpdateMessageRequest struct {
	value *UpdateMessageRequest
	isSet bool
}

func (v NullableUpdateMessageRequest) Get() *UpdateMessageRequest {
	return v.value
}

func (v *NullableUpdateMessageRequest) Set(val *UpdateMessageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateMessageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateMessageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateMessageRequest(val *UpdateMessageRequest) *NullableUpdateMessageRequest {
	return &NullableUpdateMessageRequest{value: val, isSet: true}
}

func (v NullableUpdateMessageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateMessageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


