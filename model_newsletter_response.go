/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the NewsletterResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewsletterResponse{}

// NewsletterResponse struct for NewsletterResponse
type NewsletterResponse struct {
	Code *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Results *NewsletterResponseResults `json:"results,omitempty"`
}

// NewNewsletterResponse instantiates a new NewsletterResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsletterResponse() *NewsletterResponse {
	this := NewsletterResponse{}
	return &this
}

// NewNewsletterResponseWithDefaults instantiates a new NewsletterResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsletterResponseWithDefaults() *NewsletterResponse {
	this := NewsletterResponse{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *NewsletterResponse) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterResponse) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *NewsletterResponse) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *NewsletterResponse) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *NewsletterResponse) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterResponse) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *NewsletterResponse) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *NewsletterResponse) SetMessage(v string) {
	o.Message = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *NewsletterResponse) GetResults() NewsletterResponseResults {
	if o == nil || IsNil(o.Results) {
		var ret NewsletterResponseResults
		return ret
	}
	return *o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterResponse) GetResultsOk() (*NewsletterResponseResults, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *NewsletterResponse) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given NewsletterResponseResults and assigns it to the Results field.
func (o *NewsletterResponse) SetResults(v NewsletterResponseResults) {
	o.Results = &v
}

func (o NewsletterResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewsletterResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableNewsletterResponse struct {
	value *NewsletterResponse
	isSet bool
}

func (v NullableNewsletterResponse) Get() *NewsletterResponse {
	return v.value
}

func (v *NullableNewsletterResponse) Set(val *NewsletterResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsletterResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsletterResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsletterResponse(val *NewsletterResponse) *NullableNewsletterResponse {
	return &NullableNewsletterResponse{value: val, isSet: true}
}

func (v NullableNewsletterResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsletterResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


