/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 5.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the Newsletter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Newsletter{}

// Newsletter struct for Newsletter
type Newsletter struct {
	Id *string `json:"id,omitempty"`
	State *NewsletterState `json:"state,omitempty"`
	ThreadMetadata *NewsletterThreadMetadata `json:"thread_metadata,omitempty"`
	ViewerMetadata *NewsletterViewerMetadata `json:"viewer_metadata,omitempty"`
}

// NewNewsletter instantiates a new Newsletter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsletter() *Newsletter {
	this := Newsletter{}
	return &this
}

// NewNewsletterWithDefaults instantiates a new Newsletter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsletterWithDefaults() *Newsletter {
	this := Newsletter{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Newsletter) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Newsletter) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Newsletter) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Newsletter) SetId(v string) {
	o.Id = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Newsletter) GetState() NewsletterState {
	if o == nil || IsNil(o.State) {
		var ret NewsletterState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Newsletter) GetStateOk() (*NewsletterState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Newsletter) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given NewsletterState and assigns it to the State field.
func (o *Newsletter) SetState(v NewsletterState) {
	o.State = &v
}

// GetThreadMetadata returns the ThreadMetadata field value if set, zero value otherwise.
func (o *Newsletter) GetThreadMetadata() NewsletterThreadMetadata {
	if o == nil || IsNil(o.ThreadMetadata) {
		var ret NewsletterThreadMetadata
		return ret
	}
	return *o.ThreadMetadata
}

// GetThreadMetadataOk returns a tuple with the ThreadMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Newsletter) GetThreadMetadataOk() (*NewsletterThreadMetadata, bool) {
	if o == nil || IsNil(o.ThreadMetadata) {
		return nil, false
	}
	return o.ThreadMetadata, true
}

// HasThreadMetadata returns a boolean if a field has been set.
func (o *Newsletter) HasThreadMetadata() bool {
	if o != nil && !IsNil(o.ThreadMetadata) {
		return true
	}

	return false
}

// SetThreadMetadata gets a reference to the given NewsletterThreadMetadata and assigns it to the ThreadMetadata field.
func (o *Newsletter) SetThreadMetadata(v NewsletterThreadMetadata) {
	o.ThreadMetadata = &v
}

// GetViewerMetadata returns the ViewerMetadata field value if set, zero value otherwise.
func (o *Newsletter) GetViewerMetadata() NewsletterViewerMetadata {
	if o == nil || IsNil(o.ViewerMetadata) {
		var ret NewsletterViewerMetadata
		return ret
	}
	return *o.ViewerMetadata
}

// GetViewerMetadataOk returns a tuple with the ViewerMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Newsletter) GetViewerMetadataOk() (*NewsletterViewerMetadata, bool) {
	if o == nil || IsNil(o.ViewerMetadata) {
		return nil, false
	}
	return o.ViewerMetadata, true
}

// HasViewerMetadata returns a boolean if a field has been set.
func (o *Newsletter) HasViewerMetadata() bool {
	if o != nil && !IsNil(o.ViewerMetadata) {
		return true
	}

	return false
}

// SetViewerMetadata gets a reference to the given NewsletterViewerMetadata and assigns it to the ViewerMetadata field.
func (o *Newsletter) SetViewerMetadata(v NewsletterViewerMetadata) {
	o.ViewerMetadata = &v
}

func (o Newsletter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Newsletter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ThreadMetadata) {
		toSerialize["thread_metadata"] = o.ThreadMetadata
	}
	if !IsNil(o.ViewerMetadata) {
		toSerialize["viewer_metadata"] = o.ViewerMetadata
	}
	return toSerialize, nil
}

type NullableNewsletter struct {
	value *Newsletter
	isSet bool
}

func (v NullableNewsletter) Get() *Newsletter {
	return v.value
}

func (v *NullableNewsletter) Set(val *Newsletter) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsletter) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsletter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsletter(val *Newsletter) *NullableNewsletter {
	return &NullableNewsletter{value: val, isSet: true}
}

func (v NullableNewsletter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsletter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


