/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 5.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the NewsletterThreadMetadataPicture type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewsletterThreadMetadataPicture{}

// NewsletterThreadMetadataPicture struct for NewsletterThreadMetadataPicture
type NewsletterThreadMetadataPicture struct {
	Url *string `json:"url,omitempty"`
	Id *string `json:"id,omitempty"`
	Type *string `json:"type,omitempty"`
	DirectPath *string `json:"direct_path,omitempty"`
}

// NewNewsletterThreadMetadataPicture instantiates a new NewsletterThreadMetadataPicture object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsletterThreadMetadataPicture() *NewsletterThreadMetadataPicture {
	this := NewsletterThreadMetadataPicture{}
	return &this
}

// NewNewsletterThreadMetadataPictureWithDefaults instantiates a new NewsletterThreadMetadataPicture object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsletterThreadMetadataPictureWithDefaults() *NewsletterThreadMetadataPicture {
	this := NewsletterThreadMetadataPicture{}
	return &this
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *NewsletterThreadMetadataPicture) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterThreadMetadataPicture) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *NewsletterThreadMetadataPicture) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *NewsletterThreadMetadataPicture) SetUrl(v string) {
	o.Url = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NewsletterThreadMetadataPicture) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterThreadMetadataPicture) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NewsletterThreadMetadataPicture) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NewsletterThreadMetadataPicture) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NewsletterThreadMetadataPicture) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterThreadMetadataPicture) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NewsletterThreadMetadataPicture) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NewsletterThreadMetadataPicture) SetType(v string) {
	o.Type = &v
}

// GetDirectPath returns the DirectPath field value if set, zero value otherwise.
func (o *NewsletterThreadMetadataPicture) GetDirectPath() string {
	if o == nil || IsNil(o.DirectPath) {
		var ret string
		return ret
	}
	return *o.DirectPath
}

// GetDirectPathOk returns a tuple with the DirectPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterThreadMetadataPicture) GetDirectPathOk() (*string, bool) {
	if o == nil || IsNil(o.DirectPath) {
		return nil, false
	}
	return o.DirectPath, true
}

// HasDirectPath returns a boolean if a field has been set.
func (o *NewsletterThreadMetadataPicture) HasDirectPath() bool {
	if o != nil && !IsNil(o.DirectPath) {
		return true
	}

	return false
}

// SetDirectPath gets a reference to the given string and assigns it to the DirectPath field.
func (o *NewsletterThreadMetadataPicture) SetDirectPath(v string) {
	o.DirectPath = &v
}

func (o NewsletterThreadMetadataPicture) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewsletterThreadMetadataPicture) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.DirectPath) {
		toSerialize["direct_path"] = o.DirectPath
	}
	return toSerialize, nil
}

type NullableNewsletterThreadMetadataPicture struct {
	value *NewsletterThreadMetadataPicture
	isSet bool
}

func (v NullableNewsletterThreadMetadataPicture) Get() *NewsletterThreadMetadataPicture {
	return v.value
}

func (v *NullableNewsletterThreadMetadataPicture) Set(val *NewsletterThreadMetadataPicture) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsletterThreadMetadataPicture) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsletterThreadMetadataPicture) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsletterThreadMetadataPicture(val *NewsletterThreadMetadataPicture) *NullableNewsletterThreadMetadataPicture {
	return &NullableNewsletterThreadMetadataPicture{value: val, isSet: true}
}

func (v NullableNewsletterThreadMetadataPicture) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsletterThreadMetadataPicture) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


