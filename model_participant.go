/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the Participant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Participant{}

// Participant struct for Participant
type Participant struct {
	JID *string `json:"JID,omitempty"`
	LID *string `json:"LID,omitempty"`
	IsAdmin *bool `json:"IsAdmin,omitempty"`
	IsSuperAdmin *bool `json:"IsSuperAdmin,omitempty"`
	DisplayName *string `json:"DisplayName,omitempty"`
	Error *int32 `json:"Error,omitempty"`
	AddRequest *string `json:"AddRequest,omitempty"`
}

// NewParticipant instantiates a new Participant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParticipant() *Participant {
	this := Participant{}
	return &this
}

// NewParticipantWithDefaults instantiates a new Participant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParticipantWithDefaults() *Participant {
	this := Participant{}
	return &this
}

// GetJID returns the JID field value if set, zero value otherwise.
func (o *Participant) GetJID() string {
	if o == nil || IsNil(o.JID) {
		var ret string
		return ret
	}
	return *o.JID
}

// GetJIDOk returns a tuple with the JID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetJIDOk() (*string, bool) {
	if o == nil || IsNil(o.JID) {
		return nil, false
	}
	return o.JID, true
}

// HasJID returns a boolean if a field has been set.
func (o *Participant) HasJID() bool {
	if o != nil && !IsNil(o.JID) {
		return true
	}

	return false
}

// SetJID gets a reference to the given string and assigns it to the JID field.
func (o *Participant) SetJID(v string) {
	o.JID = &v
}

// GetLID returns the LID field value if set, zero value otherwise.
func (o *Participant) GetLID() string {
	if o == nil || IsNil(o.LID) {
		var ret string
		return ret
	}
	return *o.LID
}

// GetLIDOk returns a tuple with the LID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetLIDOk() (*string, bool) {
	if o == nil || IsNil(o.LID) {
		return nil, false
	}
	return o.LID, true
}

// HasLID returns a boolean if a field has been set.
func (o *Participant) HasLID() bool {
	if o != nil && !IsNil(o.LID) {
		return true
	}

	return false
}

// SetLID gets a reference to the given string and assigns it to the LID field.
func (o *Participant) SetLID(v string) {
	o.LID = &v
}

// GetIsAdmin returns the IsAdmin field value if set, zero value otherwise.
func (o *Participant) GetIsAdmin() bool {
	if o == nil || IsNil(o.IsAdmin) {
		var ret bool
		return ret
	}
	return *o.IsAdmin
}

// GetIsAdminOk returns a tuple with the IsAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetIsAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAdmin) {
		return nil, false
	}
	return o.IsAdmin, true
}

// HasIsAdmin returns a boolean if a field has been set.
func (o *Participant) HasIsAdmin() bool {
	if o != nil && !IsNil(o.IsAdmin) {
		return true
	}

	return false
}

// SetIsAdmin gets a reference to the given bool and assigns it to the IsAdmin field.
func (o *Participant) SetIsAdmin(v bool) {
	o.IsAdmin = &v
}

// GetIsSuperAdmin returns the IsSuperAdmin field value if set, zero value otherwise.
func (o *Participant) GetIsSuperAdmin() bool {
	if o == nil || IsNil(o.IsSuperAdmin) {
		var ret bool
		return ret
	}
	return *o.IsSuperAdmin
}

// GetIsSuperAdminOk returns a tuple with the IsSuperAdmin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetIsSuperAdminOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSuperAdmin) {
		return nil, false
	}
	return o.IsSuperAdmin, true
}

// HasIsSuperAdmin returns a boolean if a field has been set.
func (o *Participant) HasIsSuperAdmin() bool {
	if o != nil && !IsNil(o.IsSuperAdmin) {
		return true
	}

	return false
}

// SetIsSuperAdmin gets a reference to the given bool and assigns it to the IsSuperAdmin field.
func (o *Participant) SetIsSuperAdmin(v bool) {
	o.IsSuperAdmin = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Participant) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Participant) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Participant) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *Participant) GetError() int32 {
	if o == nil || IsNil(o.Error) {
		var ret int32
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetErrorOk() (*int32, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *Participant) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given int32 and assigns it to the Error field.
func (o *Participant) SetError(v int32) {
	o.Error = &v
}

// GetAddRequest returns the AddRequest field value if set, zero value otherwise.
func (o *Participant) GetAddRequest() string {
	if o == nil || IsNil(o.AddRequest) {
		var ret string
		return ret
	}
	return *o.AddRequest
}

// GetAddRequestOk returns a tuple with the AddRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Participant) GetAddRequestOk() (*string, bool) {
	if o == nil || IsNil(o.AddRequest) {
		return nil, false
	}
	return o.AddRequest, true
}

// HasAddRequest returns a boolean if a field has been set.
func (o *Participant) HasAddRequest() bool {
	if o != nil && !IsNil(o.AddRequest) {
		return true
	}

	return false
}

// SetAddRequest gets a reference to the given string and assigns it to the AddRequest field.
func (o *Participant) SetAddRequest(v string) {
	o.AddRequest = &v
}

func (o Participant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Participant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JID) {
		toSerialize["JID"] = o.JID
	}
	if !IsNil(o.LID) {
		toSerialize["LID"] = o.LID
	}
	if !IsNil(o.IsAdmin) {
		toSerialize["IsAdmin"] = o.IsAdmin
	}
	if !IsNil(o.IsSuperAdmin) {
		toSerialize["IsSuperAdmin"] = o.IsSuperAdmin
	}
	if !IsNil(o.DisplayName) {
		toSerialize["DisplayName"] = o.DisplayName
	}
	if !IsNil(o.Error) {
		toSerialize["Error"] = o.Error
	}
	if !IsNil(o.AddRequest) {
		toSerialize["AddRequest"] = o.AddRequest
	}
	return toSerialize, nil
}

type NullableParticipant struct {
	value *Participant
	isSet bool
}

func (v NullableParticipant) Get() *Participant {
	return v.value
}

func (v *NullableParticipant) Set(val *Participant) {
	v.value = val
	v.isSet = true
}

func (v NullableParticipant) IsSet() bool {
	return v.isSet
}

func (v *NullableParticipant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParticipant(val *Participant) *NullableParticipant {
	return &NullableParticipant{value: val, isSet: true}
}

func (v NullableParticipant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParticipant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


