/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 5.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the NewsletterThreadMetadataSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewsletterThreadMetadataSettings{}

// NewsletterThreadMetadataSettings struct for NewsletterThreadMetadataSettings
type NewsletterThreadMetadataSettings struct {
	ReactionCodes *NewsletterThreadMetadataSettingsReactionCodes `json:"reaction_codes,omitempty"`
}

// NewNewsletterThreadMetadataSettings instantiates a new NewsletterThreadMetadataSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsletterThreadMetadataSettings() *NewsletterThreadMetadataSettings {
	this := NewsletterThreadMetadataSettings{}
	return &this
}

// NewNewsletterThreadMetadataSettingsWithDefaults instantiates a new NewsletterThreadMetadataSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsletterThreadMetadataSettingsWithDefaults() *NewsletterThreadMetadataSettings {
	this := NewsletterThreadMetadataSettings{}
	return &this
}

// GetReactionCodes returns the ReactionCodes field value if set, zero value otherwise.
func (o *NewsletterThreadMetadataSettings) GetReactionCodes() NewsletterThreadMetadataSettingsReactionCodes {
	if o == nil || IsNil(o.ReactionCodes) {
		var ret NewsletterThreadMetadataSettingsReactionCodes
		return ret
	}
	return *o.ReactionCodes
}

// GetReactionCodesOk returns a tuple with the ReactionCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterThreadMetadataSettings) GetReactionCodesOk() (*NewsletterThreadMetadataSettingsReactionCodes, bool) {
	if o == nil || IsNil(o.ReactionCodes) {
		return nil, false
	}
	return o.ReactionCodes, true
}

// HasReactionCodes returns a boolean if a field has been set.
func (o *NewsletterThreadMetadataSettings) HasReactionCodes() bool {
	if o != nil && !IsNil(o.ReactionCodes) {
		return true
	}

	return false
}

// SetReactionCodes gets a reference to the given NewsletterThreadMetadataSettingsReactionCodes and assigns it to the ReactionCodes field.
func (o *NewsletterThreadMetadataSettings) SetReactionCodes(v NewsletterThreadMetadataSettingsReactionCodes) {
	o.ReactionCodes = &v
}

func (o NewsletterThreadMetadataSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewsletterThreadMetadataSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReactionCodes) {
		toSerialize["reaction_codes"] = o.ReactionCodes
	}
	return toSerialize, nil
}

type NullableNewsletterThreadMetadataSettings struct {
	value *NewsletterThreadMetadataSettings
	isSet bool
}

func (v NullableNewsletterThreadMetadataSettings) Get() *NewsletterThreadMetadataSettings {
	return v.value
}

func (v *NullableNewsletterThreadMetadataSettings) Set(val *NewsletterThreadMetadataSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsletterThreadMetadataSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsletterThreadMetadataSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsletterThreadMetadataSettings(val *NewsletterThreadMetadataSettings) *NullableNewsletterThreadMetadataSettings {
	return &NullableNewsletterThreadMetadataSettings{value: val, isSet: true}
}

func (v NullableNewsletterThreadMetadataSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsletterThreadMetadataSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


