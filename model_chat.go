/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
	"time"
)

// checks if the Chat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Chat{}

// Chat struct for Chat
type Chat struct {
	// Chat JID identifier
	Jid *string `json:"jid,omitempty"`
	// Chat display name
	Name *string `json:"name,omitempty"`
	// Timestamp of the last message
	LastMessageTime *time.Time `json:"last_message_time,omitempty"`
	// Ephemeral message expiration time in seconds (0 = disabled)
	EphemeralExpiration *int32 `json:"ephemeral_expiration,omitempty"`
	// Chat creation timestamp
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Chat last update timestamp
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewChat instantiates a new Chat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChat() *Chat {
	this := Chat{}
	return &this
}

// NewChatWithDefaults instantiates a new Chat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatWithDefaults() *Chat {
	this := Chat{}
	return &this
}

// GetJid returns the Jid field value if set, zero value otherwise.
func (o *Chat) GetJid() string {
	if o == nil || IsNil(o.Jid) {
		var ret string
		return ret
	}
	return *o.Jid
}

// GetJidOk returns a tuple with the Jid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chat) GetJidOk() (*string, bool) {
	if o == nil || IsNil(o.Jid) {
		return nil, false
	}
	return o.Jid, true
}

// HasJid returns a boolean if a field has been set.
func (o *Chat) HasJid() bool {
	if o != nil && !IsNil(o.Jid) {
		return true
	}

	return false
}

// SetJid gets a reference to the given string and assigns it to the Jid field.
func (o *Chat) SetJid(v string) {
	o.Jid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Chat) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chat) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Chat) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Chat) SetName(v string) {
	o.Name = &v
}

// GetLastMessageTime returns the LastMessageTime field value if set, zero value otherwise.
func (o *Chat) GetLastMessageTime() time.Time {
	if o == nil || IsNil(o.LastMessageTime) {
		var ret time.Time
		return ret
	}
	return *o.LastMessageTime
}

// GetLastMessageTimeOk returns a tuple with the LastMessageTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chat) GetLastMessageTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastMessageTime) {
		return nil, false
	}
	return o.LastMessageTime, true
}

// HasLastMessageTime returns a boolean if a field has been set.
func (o *Chat) HasLastMessageTime() bool {
	if o != nil && !IsNil(o.LastMessageTime) {
		return true
	}

	return false
}

// SetLastMessageTime gets a reference to the given time.Time and assigns it to the LastMessageTime field.
func (o *Chat) SetLastMessageTime(v time.Time) {
	o.LastMessageTime = &v
}

// GetEphemeralExpiration returns the EphemeralExpiration field value if set, zero value otherwise.
func (o *Chat) GetEphemeralExpiration() int32 {
	if o == nil || IsNil(o.EphemeralExpiration) {
		var ret int32
		return ret
	}
	return *o.EphemeralExpiration
}

// GetEphemeralExpirationOk returns a tuple with the EphemeralExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chat) GetEphemeralExpirationOk() (*int32, bool) {
	if o == nil || IsNil(o.EphemeralExpiration) {
		return nil, false
	}
	return o.EphemeralExpiration, true
}

// HasEphemeralExpiration returns a boolean if a field has been set.
func (o *Chat) HasEphemeralExpiration() bool {
	if o != nil && !IsNil(o.EphemeralExpiration) {
		return true
	}

	return false
}

// SetEphemeralExpiration gets a reference to the given int32 and assigns it to the EphemeralExpiration field.
func (o *Chat) SetEphemeralExpiration(v int32) {
	o.EphemeralExpiration = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Chat) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chat) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Chat) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Chat) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Chat) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chat) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Chat) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Chat) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Chat) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Chat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Jid) {
		toSerialize["jid"] = o.Jid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.LastMessageTime) {
		toSerialize["last_message_time"] = o.LastMessageTime
	}
	if !IsNil(o.EphemeralExpiration) {
		toSerialize["ephemeral_expiration"] = o.EphemeralExpiration
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableChat struct {
	value *Chat
	isSet bool
}

func (v NullableChat) Get() *Chat {
	return v.value
}

func (v *NullableChat) Set(val *Chat) {
	v.value = val
	v.isSet = true
}

func (v NullableChat) IsSet() bool {
	return v.isSet
}

func (v *NullableChat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChat(val *Chat) *NullableChat {
	return &NullableChat{value: val, isSet: true}
}

func (v NullableChat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


