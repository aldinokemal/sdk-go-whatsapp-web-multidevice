/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 5.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the MyListContacts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MyListContacts{}

// MyListContacts struct for MyListContacts
type MyListContacts struct {
	Jid *string `json:"jid,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NewMyListContacts instantiates a new MyListContacts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMyListContacts() *MyListContacts {
	this := MyListContacts{}
	return &this
}

// NewMyListContactsWithDefaults instantiates a new MyListContacts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMyListContactsWithDefaults() *MyListContacts {
	this := MyListContacts{}
	return &this
}

// GetJid returns the Jid field value if set, zero value otherwise.
func (o *MyListContacts) GetJid() string {
	if o == nil || IsNil(o.Jid) {
		var ret string
		return ret
	}
	return *o.Jid
}

// GetJidOk returns a tuple with the Jid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyListContacts) GetJidOk() (*string, bool) {
	if o == nil || IsNil(o.Jid) {
		return nil, false
	}
	return o.Jid, true
}

// HasJid returns a boolean if a field has been set.
func (o *MyListContacts) HasJid() bool {
	if o != nil && !IsNil(o.Jid) {
		return true
	}

	return false
}

// SetJid gets a reference to the given string and assigns it to the Jid field.
func (o *MyListContacts) SetJid(v string) {
	o.Jid = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *MyListContacts) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MyListContacts) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *MyListContacts) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *MyListContacts) SetName(v string) {
	o.Name = &v
}

func (o MyListContacts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MyListContacts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Jid) {
		toSerialize["jid"] = o.Jid
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableMyListContacts struct {
	value *MyListContacts
	isSet bool
}

func (v NullableMyListContacts) Get() *MyListContacts {
	return v.value
}

func (v *NullableMyListContacts) Set(val *MyListContacts) {
	v.value = val
	v.isSet = true
}

func (v NullableMyListContacts) IsSet() bool {
	return v.isSet
}

func (v *NullableMyListContacts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMyListContacts(val *MyListContacts) *NullableMyListContacts {
	return &NullableMyListContacts{value: val, isSet: true}
}

func (v NullableMyListContacts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMyListContacts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


