/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
	"time"
)

// checks if the ChatMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatMessage{}

// ChatMessage struct for ChatMessage
type ChatMessage struct {
	// Message ID
	Id *string `json:"id,omitempty"`
	// Chat JID this message belongs to
	ChatJid *string `json:"chat_jid,omitempty"`
	// Sender JID
	SenderJid *string `json:"sender_jid,omitempty"`
	// Message text content
	Content *string `json:"content,omitempty"`
	// Message timestamp
	Timestamp *time.Time `json:"timestamp,omitempty"`
	// Whether this message was sent by the current user
	IsFromMe *bool `json:"is_from_me,omitempty"`
	// Type of media (image, video, audio, document, etc.)
	MediaType NullableString `json:"media_type,omitempty"`
	// Original filename for media messages
	Filename NullableString `json:"filename,omitempty"`
	// Media file URL
	Url NullableString `json:"url,omitempty"`
	// File size in bytes for media messages
	FileLength NullableInt32 `json:"file_length,omitempty"`
	// Record creation timestamp
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Record last update timestamp
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NewChatMessage instantiates a new ChatMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatMessage() *ChatMessage {
	this := ChatMessage{}
	return &this
}

// NewChatMessageWithDefaults instantiates a new ChatMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatMessageWithDefaults() *ChatMessage {
	this := ChatMessage{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ChatMessage) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ChatMessage) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ChatMessage) SetId(v string) {
	o.Id = &v
}

// GetChatJid returns the ChatJid field value if set, zero value otherwise.
func (o *ChatMessage) GetChatJid() string {
	if o == nil || IsNil(o.ChatJid) {
		var ret string
		return ret
	}
	return *o.ChatJid
}

// GetChatJidOk returns a tuple with the ChatJid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetChatJidOk() (*string, bool) {
	if o == nil || IsNil(o.ChatJid) {
		return nil, false
	}
	return o.ChatJid, true
}

// HasChatJid returns a boolean if a field has been set.
func (o *ChatMessage) HasChatJid() bool {
	if o != nil && !IsNil(o.ChatJid) {
		return true
	}

	return false
}

// SetChatJid gets a reference to the given string and assigns it to the ChatJid field.
func (o *ChatMessage) SetChatJid(v string) {
	o.ChatJid = &v
}

// GetSenderJid returns the SenderJid field value if set, zero value otherwise.
func (o *ChatMessage) GetSenderJid() string {
	if o == nil || IsNil(o.SenderJid) {
		var ret string
		return ret
	}
	return *o.SenderJid
}

// GetSenderJidOk returns a tuple with the SenderJid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetSenderJidOk() (*string, bool) {
	if o == nil || IsNil(o.SenderJid) {
		return nil, false
	}
	return o.SenderJid, true
}

// HasSenderJid returns a boolean if a field has been set.
func (o *ChatMessage) HasSenderJid() bool {
	if o != nil && !IsNil(o.SenderJid) {
		return true
	}

	return false
}

// SetSenderJid gets a reference to the given string and assigns it to the SenderJid field.
func (o *ChatMessage) SetSenderJid(v string) {
	o.SenderJid = &v
}

// GetContent returns the Content field value if set, zero value otherwise.
func (o *ChatMessage) GetContent() string {
	if o == nil || IsNil(o.Content) {
		var ret string
		return ret
	}
	return *o.Content
}

// GetContentOk returns a tuple with the Content field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetContentOk() (*string, bool) {
	if o == nil || IsNil(o.Content) {
		return nil, false
	}
	return o.Content, true
}

// HasContent returns a boolean if a field has been set.
func (o *ChatMessage) HasContent() bool {
	if o != nil && !IsNil(o.Content) {
		return true
	}

	return false
}

// SetContent gets a reference to the given string and assigns it to the Content field.
func (o *ChatMessage) SetContent(v string) {
	o.Content = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *ChatMessage) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ChatMessage) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *ChatMessage) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

// GetIsFromMe returns the IsFromMe field value if set, zero value otherwise.
func (o *ChatMessage) GetIsFromMe() bool {
	if o == nil || IsNil(o.IsFromMe) {
		var ret bool
		return ret
	}
	return *o.IsFromMe
}

// GetIsFromMeOk returns a tuple with the IsFromMe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetIsFromMeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsFromMe) {
		return nil, false
	}
	return o.IsFromMe, true
}

// HasIsFromMe returns a boolean if a field has been set.
func (o *ChatMessage) HasIsFromMe() bool {
	if o != nil && !IsNil(o.IsFromMe) {
		return true
	}

	return false
}

// SetIsFromMe gets a reference to the given bool and assigns it to the IsFromMe field.
func (o *ChatMessage) SetIsFromMe(v bool) {
	o.IsFromMe = &v
}

// GetMediaType returns the MediaType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatMessage) GetMediaType() string {
	if o == nil || IsNil(o.MediaType.Get()) {
		var ret string
		return ret
	}
	return *o.MediaType.Get()
}

// GetMediaTypeOk returns a tuple with the MediaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatMessage) GetMediaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MediaType.Get(), o.MediaType.IsSet()
}

// HasMediaType returns a boolean if a field has been set.
func (o *ChatMessage) HasMediaType() bool {
	if o != nil && o.MediaType.IsSet() {
		return true
	}

	return false
}

// SetMediaType gets a reference to the given NullableString and assigns it to the MediaType field.
func (o *ChatMessage) SetMediaType(v string) {
	o.MediaType.Set(&v)
}
// SetMediaTypeNil sets the value for MediaType to be an explicit nil
func (o *ChatMessage) SetMediaTypeNil() {
	o.MediaType.Set(nil)
}

// UnsetMediaType ensures that no value is present for MediaType, not even an explicit nil
func (o *ChatMessage) UnsetMediaType() {
	o.MediaType.Unset()
}

// GetFilename returns the Filename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatMessage) GetFilename() string {
	if o == nil || IsNil(o.Filename.Get()) {
		var ret string
		return ret
	}
	return *o.Filename.Get()
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatMessage) GetFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Filename.Get(), o.Filename.IsSet()
}

// HasFilename returns a boolean if a field has been set.
func (o *ChatMessage) HasFilename() bool {
	if o != nil && o.Filename.IsSet() {
		return true
	}

	return false
}

// SetFilename gets a reference to the given NullableString and assigns it to the Filename field.
func (o *ChatMessage) SetFilename(v string) {
	o.Filename.Set(&v)
}
// SetFilenameNil sets the value for Filename to be an explicit nil
func (o *ChatMessage) SetFilenameNil() {
	o.Filename.Set(nil)
}

// UnsetFilename ensures that no value is present for Filename, not even an explicit nil
func (o *ChatMessage) UnsetFilename() {
	o.Filename.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatMessage) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatMessage) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *ChatMessage) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *ChatMessage) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *ChatMessage) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *ChatMessage) UnsetUrl() {
	o.Url.Unset()
}

// GetFileLength returns the FileLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChatMessage) GetFileLength() int32 {
	if o == nil || IsNil(o.FileLength.Get()) {
		var ret int32
		return ret
	}
	return *o.FileLength.Get()
}

// GetFileLengthOk returns a tuple with the FileLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChatMessage) GetFileLengthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileLength.Get(), o.FileLength.IsSet()
}

// HasFileLength returns a boolean if a field has been set.
func (o *ChatMessage) HasFileLength() bool {
	if o != nil && o.FileLength.IsSet() {
		return true
	}

	return false
}

// SetFileLength gets a reference to the given NullableInt32 and assigns it to the FileLength field.
func (o *ChatMessage) SetFileLength(v int32) {
	o.FileLength.Set(&v)
}
// SetFileLengthNil sets the value for FileLength to be an explicit nil
func (o *ChatMessage) SetFileLengthNil() {
	o.FileLength.Set(nil)
}

// UnsetFileLength ensures that no value is present for FileLength, not even an explicit nil
func (o *ChatMessage) UnsetFileLength() {
	o.FileLength.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ChatMessage) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ChatMessage) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *ChatMessage) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *ChatMessage) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChatMessage) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *ChatMessage) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *ChatMessage) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o ChatMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ChatJid) {
		toSerialize["chat_jid"] = o.ChatJid
	}
	if !IsNil(o.SenderJid) {
		toSerialize["sender_jid"] = o.SenderJid
	}
	if !IsNil(o.Content) {
		toSerialize["content"] = o.Content
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	if !IsNil(o.IsFromMe) {
		toSerialize["is_from_me"] = o.IsFromMe
	}
	if o.MediaType.IsSet() {
		toSerialize["media_type"] = o.MediaType.Get()
	}
	if o.Filename.IsSet() {
		toSerialize["filename"] = o.Filename.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.FileLength.IsSet() {
		toSerialize["file_length"] = o.FileLength.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableChatMessage struct {
	value *ChatMessage
	isSet bool
}

func (v NullableChatMessage) Get() *ChatMessage {
	return v.value
}

func (v *NullableChatMessage) Set(val *ChatMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableChatMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableChatMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatMessage(val *ChatMessage) *NullableChatMessage {
	return &NullableChatMessage{value: val, isSet: true}
}

func (v NullableChatMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


