/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 5.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SendPollRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SendPollRequest{}

// SendPollRequest struct for SendPollRequest
type SendPollRequest struct {
	// The WhatsApp phone number to send the poll to, including the '@s.whatsapp.net' suffix.
	Phone string `json:"phone"`
	// The question for the poll.
	Question string `json:"question"`
	// The options for the poll.
	Options []string `json:"options"`
	// The maximum number of answers allowed for the poll.
	MaxAnswer int32 `json:"max_answer"`
}

type _SendPollRequest SendPollRequest

// NewSendPollRequest instantiates a new SendPollRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendPollRequest(phone string, question string, options []string, maxAnswer int32) *SendPollRequest {
	this := SendPollRequest{}
	this.Phone = phone
	this.Question = question
	this.Options = options
	this.MaxAnswer = maxAnswer
	return &this
}

// NewSendPollRequestWithDefaults instantiates a new SendPollRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendPollRequestWithDefaults() *SendPollRequest {
	this := SendPollRequest{}
	return &this
}

// GetPhone returns the Phone field value
func (o *SendPollRequest) GetPhone() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value
// and a boolean to check if the value has been set.
func (o *SendPollRequest) GetPhoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Phone, true
}

// SetPhone sets field value
func (o *SendPollRequest) SetPhone(v string) {
	o.Phone = v
}

// GetQuestion returns the Question field value
func (o *SendPollRequest) GetQuestion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Question
}

// GetQuestionOk returns a tuple with the Question field value
// and a boolean to check if the value has been set.
func (o *SendPollRequest) GetQuestionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Question, true
}

// SetQuestion sets field value
func (o *SendPollRequest) SetQuestion(v string) {
	o.Question = v
}

// GetOptions returns the Options field value
func (o *SendPollRequest) GetOptions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Options
}

// GetOptionsOk returns a tuple with the Options field value
// and a boolean to check if the value has been set.
func (o *SendPollRequest) GetOptionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options, true
}

// SetOptions sets field value
func (o *SendPollRequest) SetOptions(v []string) {
	o.Options = v
}

// GetMaxAnswer returns the MaxAnswer field value
func (o *SendPollRequest) GetMaxAnswer() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxAnswer
}

// GetMaxAnswerOk returns a tuple with the MaxAnswer field value
// and a boolean to check if the value has been set.
func (o *SendPollRequest) GetMaxAnswerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxAnswer, true
}

// SetMaxAnswer sets field value
func (o *SendPollRequest) SetMaxAnswer(v int32) {
	o.MaxAnswer = v
}

func (o SendPollRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SendPollRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["phone"] = o.Phone
	toSerialize["question"] = o.Question
	toSerialize["options"] = o.Options
	toSerialize["max_answer"] = o.MaxAnswer
	return toSerialize, nil
}

func (o *SendPollRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"phone",
		"question",
		"options",
		"max_answer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSendPollRequest := _SendPollRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSendPollRequest)

	if err != nil {
		return err
	}

	*o = SendPollRequest(varSendPollRequest)

	return err
}

type NullableSendPollRequest struct {
	value *SendPollRequest
	isSet bool
}

func (v NullableSendPollRequest) Get() *SendPollRequest {
	return v.value
}

func (v *NullableSendPollRequest) Set(val *SendPollRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendPollRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendPollRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendPollRequest(val *SendPollRequest) *NullableSendPollRequest {
	return &NullableSendPollRequest{value: val, isSet: true}
}

func (v NullableSendPollRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendPollRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


