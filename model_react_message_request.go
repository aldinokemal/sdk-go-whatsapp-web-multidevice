/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 4.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdk_go_whatsapp_web_multidevice

import (
	"encoding/json"
)

// checks if the ReactMessageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReactMessageRequest{}

// ReactMessageRequest struct for ReactMessageRequest
type ReactMessageRequest struct {
	// Phone number with country code
	Phone *string `json:"phone,omitempty"`
	// Emoji to react
	Emoji *string `json:"emoji,omitempty"`
}

// NewReactMessageRequest instantiates a new ReactMessageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReactMessageRequest() *ReactMessageRequest {
	this := ReactMessageRequest{}
	return &this
}

// NewReactMessageRequestWithDefaults instantiates a new ReactMessageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReactMessageRequestWithDefaults() *ReactMessageRequest {
	this := ReactMessageRequest{}
	return &this
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *ReactMessageRequest) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactMessageRequest) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *ReactMessageRequest) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *ReactMessageRequest) SetPhone(v string) {
	o.Phone = &v
}

// GetEmoji returns the Emoji field value if set, zero value otherwise.
func (o *ReactMessageRequest) GetEmoji() string {
	if o == nil || IsNil(o.Emoji) {
		var ret string
		return ret
	}
	return *o.Emoji
}

// GetEmojiOk returns a tuple with the Emoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReactMessageRequest) GetEmojiOk() (*string, bool) {
	if o == nil || IsNil(o.Emoji) {
		return nil, false
	}
	return o.Emoji, true
}

// HasEmoji returns a boolean if a field has been set.
func (o *ReactMessageRequest) HasEmoji() bool {
	if o != nil && !IsNil(o.Emoji) {
		return true
	}

	return false
}

// SetEmoji gets a reference to the given string and assigns it to the Emoji field.
func (o *ReactMessageRequest) SetEmoji(v string) {
	o.Emoji = &v
}

func (o ReactMessageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReactMessageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.Emoji) {
		toSerialize["emoji"] = o.Emoji
	}
	return toSerialize, nil
}

type NullableReactMessageRequest struct {
	value *ReactMessageRequest
	isSet bool
}

func (v NullableReactMessageRequest) Get() *ReactMessageRequest {
	return v.value
}

func (v *NullableReactMessageRequest) Set(val *ReactMessageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReactMessageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReactMessageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReactMessageRequest(val *ReactMessageRequest) *NullableReactMessageRequest {
	return &NullableReactMessageRequest{value: val, isSet: true}
}

func (v NullableReactMessageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReactMessageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


