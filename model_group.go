/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
	"time"
)

// checks if the Group type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Group{}

// Group struct for Group
type Group struct {
	JID *string `json:"JID,omitempty"`
	OwnerJID *string `json:"OwnerJID,omitempty"`
	Name *string `json:"Name,omitempty"`
	NameSetAt *time.Time `json:"NameSetAt,omitempty"`
	NameSetBy *string `json:"NameSetBy,omitempty"`
	Topic *string `json:"Topic,omitempty"`
	TopicID *string `json:"TopicID,omitempty"`
	TopicSetAt *time.Time `json:"TopicSetAt,omitempty"`
	TopicSetBy *string `json:"TopicSetBy,omitempty"`
	TopicDeleted *bool `json:"TopicDeleted,omitempty"`
	IsLocked *bool `json:"IsLocked,omitempty"`
	IsAnnounce *bool `json:"IsAnnounce,omitempty"`
	AnnounceVersionID *string `json:"AnnounceVersionID,omitempty"`
	IsEphemeral *bool `json:"IsEphemeral,omitempty"`
	DisappearingTimer *int32 `json:"DisappearingTimer,omitempty"`
	IsIncognito *bool `json:"IsIncognito,omitempty"`
	IsParent *bool `json:"IsParent,omitempty"`
	DefaultMembershipApprovalMode *string `json:"DefaultMembershipApprovalMode,omitempty"`
	LinkedParentJID *string `json:"LinkedParentJID,omitempty"`
	IsDefaultSubGroup *bool `json:"IsDefaultSubGroup,omitempty"`
	IsJoinApprovalRequired *bool `json:"IsJoinApprovalRequired,omitempty"`
	GroupCreated *time.Time `json:"GroupCreated,omitempty"`
	ParticipantVersionID *string `json:"ParticipantVersionID,omitempty"`
	Participants []Participant `json:"Participants,omitempty"`
	MemberAddMode *string `json:"MemberAddMode,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup() *Group {
	this := Group{}
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetJID returns the JID field value if set, zero value otherwise.
func (o *Group) GetJID() string {
	if o == nil || IsNil(o.JID) {
		var ret string
		return ret
	}
	return *o.JID
}

// GetJIDOk returns a tuple with the JID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetJIDOk() (*string, bool) {
	if o == nil || IsNil(o.JID) {
		return nil, false
	}
	return o.JID, true
}

// HasJID returns a boolean if a field has been set.
func (o *Group) HasJID() bool {
	if o != nil && !IsNil(o.JID) {
		return true
	}

	return false
}

// SetJID gets a reference to the given string and assigns it to the JID field.
func (o *Group) SetJID(v string) {
	o.JID = &v
}

// GetOwnerJID returns the OwnerJID field value if set, zero value otherwise.
func (o *Group) GetOwnerJID() string {
	if o == nil || IsNil(o.OwnerJID) {
		var ret string
		return ret
	}
	return *o.OwnerJID
}

// GetOwnerJIDOk returns a tuple with the OwnerJID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetOwnerJIDOk() (*string, bool) {
	if o == nil || IsNil(o.OwnerJID) {
		return nil, false
	}
	return o.OwnerJID, true
}

// HasOwnerJID returns a boolean if a field has been set.
func (o *Group) HasOwnerJID() bool {
	if o != nil && !IsNil(o.OwnerJID) {
		return true
	}

	return false
}

// SetOwnerJID gets a reference to the given string and assigns it to the OwnerJID field.
func (o *Group) SetOwnerJID(v string) {
	o.OwnerJID = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Group) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Group) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Group) SetName(v string) {
	o.Name = &v
}

// GetNameSetAt returns the NameSetAt field value if set, zero value otherwise.
func (o *Group) GetNameSetAt() time.Time {
	if o == nil || IsNil(o.NameSetAt) {
		var ret time.Time
		return ret
	}
	return *o.NameSetAt
}

// GetNameSetAtOk returns a tuple with the NameSetAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetNameSetAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NameSetAt) {
		return nil, false
	}
	return o.NameSetAt, true
}

// HasNameSetAt returns a boolean if a field has been set.
func (o *Group) HasNameSetAt() bool {
	if o != nil && !IsNil(o.NameSetAt) {
		return true
	}

	return false
}

// SetNameSetAt gets a reference to the given time.Time and assigns it to the NameSetAt field.
func (o *Group) SetNameSetAt(v time.Time) {
	o.NameSetAt = &v
}

// GetNameSetBy returns the NameSetBy field value if set, zero value otherwise.
func (o *Group) GetNameSetBy() string {
	if o == nil || IsNil(o.NameSetBy) {
		var ret string
		return ret
	}
	return *o.NameSetBy
}

// GetNameSetByOk returns a tuple with the NameSetBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetNameSetByOk() (*string, bool) {
	if o == nil || IsNil(o.NameSetBy) {
		return nil, false
	}
	return o.NameSetBy, true
}

// HasNameSetBy returns a boolean if a field has been set.
func (o *Group) HasNameSetBy() bool {
	if o != nil && !IsNil(o.NameSetBy) {
		return true
	}

	return false
}

// SetNameSetBy gets a reference to the given string and assigns it to the NameSetBy field.
func (o *Group) SetNameSetBy(v string) {
	o.NameSetBy = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *Group) GetTopic() string {
	if o == nil || IsNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetTopicOk() (*string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *Group) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *Group) SetTopic(v string) {
	o.Topic = &v
}

// GetTopicID returns the TopicID field value if set, zero value otherwise.
func (o *Group) GetTopicID() string {
	if o == nil || IsNil(o.TopicID) {
		var ret string
		return ret
	}
	return *o.TopicID
}

// GetTopicIDOk returns a tuple with the TopicID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetTopicIDOk() (*string, bool) {
	if o == nil || IsNil(o.TopicID) {
		return nil, false
	}
	return o.TopicID, true
}

// HasTopicID returns a boolean if a field has been set.
func (o *Group) HasTopicID() bool {
	if o != nil && !IsNil(o.TopicID) {
		return true
	}

	return false
}

// SetTopicID gets a reference to the given string and assigns it to the TopicID field.
func (o *Group) SetTopicID(v string) {
	o.TopicID = &v
}

// GetTopicSetAt returns the TopicSetAt field value if set, zero value otherwise.
func (o *Group) GetTopicSetAt() time.Time {
	if o == nil || IsNil(o.TopicSetAt) {
		var ret time.Time
		return ret
	}
	return *o.TopicSetAt
}

// GetTopicSetAtOk returns a tuple with the TopicSetAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetTopicSetAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TopicSetAt) {
		return nil, false
	}
	return o.TopicSetAt, true
}

// HasTopicSetAt returns a boolean if a field has been set.
func (o *Group) HasTopicSetAt() bool {
	if o != nil && !IsNil(o.TopicSetAt) {
		return true
	}

	return false
}

// SetTopicSetAt gets a reference to the given time.Time and assigns it to the TopicSetAt field.
func (o *Group) SetTopicSetAt(v time.Time) {
	o.TopicSetAt = &v
}

// GetTopicSetBy returns the TopicSetBy field value if set, zero value otherwise.
func (o *Group) GetTopicSetBy() string {
	if o == nil || IsNil(o.TopicSetBy) {
		var ret string
		return ret
	}
	return *o.TopicSetBy
}

// GetTopicSetByOk returns a tuple with the TopicSetBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetTopicSetByOk() (*string, bool) {
	if o == nil || IsNil(o.TopicSetBy) {
		return nil, false
	}
	return o.TopicSetBy, true
}

// HasTopicSetBy returns a boolean if a field has been set.
func (o *Group) HasTopicSetBy() bool {
	if o != nil && !IsNil(o.TopicSetBy) {
		return true
	}

	return false
}

// SetTopicSetBy gets a reference to the given string and assigns it to the TopicSetBy field.
func (o *Group) SetTopicSetBy(v string) {
	o.TopicSetBy = &v
}

// GetTopicDeleted returns the TopicDeleted field value if set, zero value otherwise.
func (o *Group) GetTopicDeleted() bool {
	if o == nil || IsNil(o.TopicDeleted) {
		var ret bool
		return ret
	}
	return *o.TopicDeleted
}

// GetTopicDeletedOk returns a tuple with the TopicDeleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetTopicDeletedOk() (*bool, bool) {
	if o == nil || IsNil(o.TopicDeleted) {
		return nil, false
	}
	return o.TopicDeleted, true
}

// HasTopicDeleted returns a boolean if a field has been set.
func (o *Group) HasTopicDeleted() bool {
	if o != nil && !IsNil(o.TopicDeleted) {
		return true
	}

	return false
}

// SetTopicDeleted gets a reference to the given bool and assigns it to the TopicDeleted field.
func (o *Group) SetTopicDeleted(v bool) {
	o.TopicDeleted = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *Group) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *Group) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *Group) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetIsAnnounce returns the IsAnnounce field value if set, zero value otherwise.
func (o *Group) GetIsAnnounce() bool {
	if o == nil || IsNil(o.IsAnnounce) {
		var ret bool
		return ret
	}
	return *o.IsAnnounce
}

// GetIsAnnounceOk returns a tuple with the IsAnnounce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIsAnnounceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnnounce) {
		return nil, false
	}
	return o.IsAnnounce, true
}

// HasIsAnnounce returns a boolean if a field has been set.
func (o *Group) HasIsAnnounce() bool {
	if o != nil && !IsNil(o.IsAnnounce) {
		return true
	}

	return false
}

// SetIsAnnounce gets a reference to the given bool and assigns it to the IsAnnounce field.
func (o *Group) SetIsAnnounce(v bool) {
	o.IsAnnounce = &v
}

// GetAnnounceVersionID returns the AnnounceVersionID field value if set, zero value otherwise.
func (o *Group) GetAnnounceVersionID() string {
	if o == nil || IsNil(o.AnnounceVersionID) {
		var ret string
		return ret
	}
	return *o.AnnounceVersionID
}

// GetAnnounceVersionIDOk returns a tuple with the AnnounceVersionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetAnnounceVersionIDOk() (*string, bool) {
	if o == nil || IsNil(o.AnnounceVersionID) {
		return nil, false
	}
	return o.AnnounceVersionID, true
}

// HasAnnounceVersionID returns a boolean if a field has been set.
func (o *Group) HasAnnounceVersionID() bool {
	if o != nil && !IsNil(o.AnnounceVersionID) {
		return true
	}

	return false
}

// SetAnnounceVersionID gets a reference to the given string and assigns it to the AnnounceVersionID field.
func (o *Group) SetAnnounceVersionID(v string) {
	o.AnnounceVersionID = &v
}

// GetIsEphemeral returns the IsEphemeral field value if set, zero value otherwise.
func (o *Group) GetIsEphemeral() bool {
	if o == nil || IsNil(o.IsEphemeral) {
		var ret bool
		return ret
	}
	return *o.IsEphemeral
}

// GetIsEphemeralOk returns a tuple with the IsEphemeral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIsEphemeralOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEphemeral) {
		return nil, false
	}
	return o.IsEphemeral, true
}

// HasIsEphemeral returns a boolean if a field has been set.
func (o *Group) HasIsEphemeral() bool {
	if o != nil && !IsNil(o.IsEphemeral) {
		return true
	}

	return false
}

// SetIsEphemeral gets a reference to the given bool and assigns it to the IsEphemeral field.
func (o *Group) SetIsEphemeral(v bool) {
	o.IsEphemeral = &v
}

// GetDisappearingTimer returns the DisappearingTimer field value if set, zero value otherwise.
func (o *Group) GetDisappearingTimer() int32 {
	if o == nil || IsNil(o.DisappearingTimer) {
		var ret int32
		return ret
	}
	return *o.DisappearingTimer
}

// GetDisappearingTimerOk returns a tuple with the DisappearingTimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetDisappearingTimerOk() (*int32, bool) {
	if o == nil || IsNil(o.DisappearingTimer) {
		return nil, false
	}
	return o.DisappearingTimer, true
}

// HasDisappearingTimer returns a boolean if a field has been set.
func (o *Group) HasDisappearingTimer() bool {
	if o != nil && !IsNil(o.DisappearingTimer) {
		return true
	}

	return false
}

// SetDisappearingTimer gets a reference to the given int32 and assigns it to the DisappearingTimer field.
func (o *Group) SetDisappearingTimer(v int32) {
	o.DisappearingTimer = &v
}

// GetIsIncognito returns the IsIncognito field value if set, zero value otherwise.
func (o *Group) GetIsIncognito() bool {
	if o == nil || IsNil(o.IsIncognito) {
		var ret bool
		return ret
	}
	return *o.IsIncognito
}

// GetIsIncognitoOk returns a tuple with the IsIncognito field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIsIncognitoOk() (*bool, bool) {
	if o == nil || IsNil(o.IsIncognito) {
		return nil, false
	}
	return o.IsIncognito, true
}

// HasIsIncognito returns a boolean if a field has been set.
func (o *Group) HasIsIncognito() bool {
	if o != nil && !IsNil(o.IsIncognito) {
		return true
	}

	return false
}

// SetIsIncognito gets a reference to the given bool and assigns it to the IsIncognito field.
func (o *Group) SetIsIncognito(v bool) {
	o.IsIncognito = &v
}

// GetIsParent returns the IsParent field value if set, zero value otherwise.
func (o *Group) GetIsParent() bool {
	if o == nil || IsNil(o.IsParent) {
		var ret bool
		return ret
	}
	return *o.IsParent
}

// GetIsParentOk returns a tuple with the IsParent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIsParentOk() (*bool, bool) {
	if o == nil || IsNil(o.IsParent) {
		return nil, false
	}
	return o.IsParent, true
}

// HasIsParent returns a boolean if a field has been set.
func (o *Group) HasIsParent() bool {
	if o != nil && !IsNil(o.IsParent) {
		return true
	}

	return false
}

// SetIsParent gets a reference to the given bool and assigns it to the IsParent field.
func (o *Group) SetIsParent(v bool) {
	o.IsParent = &v
}

// GetDefaultMembershipApprovalMode returns the DefaultMembershipApprovalMode field value if set, zero value otherwise.
func (o *Group) GetDefaultMembershipApprovalMode() string {
	if o == nil || IsNil(o.DefaultMembershipApprovalMode) {
		var ret string
		return ret
	}
	return *o.DefaultMembershipApprovalMode
}

// GetDefaultMembershipApprovalModeOk returns a tuple with the DefaultMembershipApprovalMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetDefaultMembershipApprovalModeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultMembershipApprovalMode) {
		return nil, false
	}
	return o.DefaultMembershipApprovalMode, true
}

// HasDefaultMembershipApprovalMode returns a boolean if a field has been set.
func (o *Group) HasDefaultMembershipApprovalMode() bool {
	if o != nil && !IsNil(o.DefaultMembershipApprovalMode) {
		return true
	}

	return false
}

// SetDefaultMembershipApprovalMode gets a reference to the given string and assigns it to the DefaultMembershipApprovalMode field.
func (o *Group) SetDefaultMembershipApprovalMode(v string) {
	o.DefaultMembershipApprovalMode = &v
}

// GetLinkedParentJID returns the LinkedParentJID field value if set, zero value otherwise.
func (o *Group) GetLinkedParentJID() string {
	if o == nil || IsNil(o.LinkedParentJID) {
		var ret string
		return ret
	}
	return *o.LinkedParentJID
}

// GetLinkedParentJIDOk returns a tuple with the LinkedParentJID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetLinkedParentJIDOk() (*string, bool) {
	if o == nil || IsNil(o.LinkedParentJID) {
		return nil, false
	}
	return o.LinkedParentJID, true
}

// HasLinkedParentJID returns a boolean if a field has been set.
func (o *Group) HasLinkedParentJID() bool {
	if o != nil && !IsNil(o.LinkedParentJID) {
		return true
	}

	return false
}

// SetLinkedParentJID gets a reference to the given string and assigns it to the LinkedParentJID field.
func (o *Group) SetLinkedParentJID(v string) {
	o.LinkedParentJID = &v
}

// GetIsDefaultSubGroup returns the IsDefaultSubGroup field value if set, zero value otherwise.
func (o *Group) GetIsDefaultSubGroup() bool {
	if o == nil || IsNil(o.IsDefaultSubGroup) {
		var ret bool
		return ret
	}
	return *o.IsDefaultSubGroup
}

// GetIsDefaultSubGroupOk returns a tuple with the IsDefaultSubGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIsDefaultSubGroupOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefaultSubGroup) {
		return nil, false
	}
	return o.IsDefaultSubGroup, true
}

// HasIsDefaultSubGroup returns a boolean if a field has been set.
func (o *Group) HasIsDefaultSubGroup() bool {
	if o != nil && !IsNil(o.IsDefaultSubGroup) {
		return true
	}

	return false
}

// SetIsDefaultSubGroup gets a reference to the given bool and assigns it to the IsDefaultSubGroup field.
func (o *Group) SetIsDefaultSubGroup(v bool) {
	o.IsDefaultSubGroup = &v
}

// GetIsJoinApprovalRequired returns the IsJoinApprovalRequired field value if set, zero value otherwise.
func (o *Group) GetIsJoinApprovalRequired() bool {
	if o == nil || IsNil(o.IsJoinApprovalRequired) {
		var ret bool
		return ret
	}
	return *o.IsJoinApprovalRequired
}

// GetIsJoinApprovalRequiredOk returns a tuple with the IsJoinApprovalRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetIsJoinApprovalRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.IsJoinApprovalRequired) {
		return nil, false
	}
	return o.IsJoinApprovalRequired, true
}

// HasIsJoinApprovalRequired returns a boolean if a field has been set.
func (o *Group) HasIsJoinApprovalRequired() bool {
	if o != nil && !IsNil(o.IsJoinApprovalRequired) {
		return true
	}

	return false
}

// SetIsJoinApprovalRequired gets a reference to the given bool and assigns it to the IsJoinApprovalRequired field.
func (o *Group) SetIsJoinApprovalRequired(v bool) {
	o.IsJoinApprovalRequired = &v
}

// GetGroupCreated returns the GroupCreated field value if set, zero value otherwise.
func (o *Group) GetGroupCreated() time.Time {
	if o == nil || IsNil(o.GroupCreated) {
		var ret time.Time
		return ret
	}
	return *o.GroupCreated
}

// GetGroupCreatedOk returns a tuple with the GroupCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupCreatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.GroupCreated) {
		return nil, false
	}
	return o.GroupCreated, true
}

// HasGroupCreated returns a boolean if a field has been set.
func (o *Group) HasGroupCreated() bool {
	if o != nil && !IsNil(o.GroupCreated) {
		return true
	}

	return false
}

// SetGroupCreated gets a reference to the given time.Time and assigns it to the GroupCreated field.
func (o *Group) SetGroupCreated(v time.Time) {
	o.GroupCreated = &v
}

// GetParticipantVersionID returns the ParticipantVersionID field value if set, zero value otherwise.
func (o *Group) GetParticipantVersionID() string {
	if o == nil || IsNil(o.ParticipantVersionID) {
		var ret string
		return ret
	}
	return *o.ParticipantVersionID
}

// GetParticipantVersionIDOk returns a tuple with the ParticipantVersionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetParticipantVersionIDOk() (*string, bool) {
	if o == nil || IsNil(o.ParticipantVersionID) {
		return nil, false
	}
	return o.ParticipantVersionID, true
}

// HasParticipantVersionID returns a boolean if a field has been set.
func (o *Group) HasParticipantVersionID() bool {
	if o != nil && !IsNil(o.ParticipantVersionID) {
		return true
	}

	return false
}

// SetParticipantVersionID gets a reference to the given string and assigns it to the ParticipantVersionID field.
func (o *Group) SetParticipantVersionID(v string) {
	o.ParticipantVersionID = &v
}

// GetParticipants returns the Participants field value if set, zero value otherwise.
func (o *Group) GetParticipants() []Participant {
	if o == nil || IsNil(o.Participants) {
		var ret []Participant
		return ret
	}
	return o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetParticipantsOk() ([]Participant, bool) {
	if o == nil || IsNil(o.Participants) {
		return nil, false
	}
	return o.Participants, true
}

// HasParticipants returns a boolean if a field has been set.
func (o *Group) HasParticipants() bool {
	if o != nil && !IsNil(o.Participants) {
		return true
	}

	return false
}

// SetParticipants gets a reference to the given []Participant and assigns it to the Participants field.
func (o *Group) SetParticipants(v []Participant) {
	o.Participants = v
}

// GetMemberAddMode returns the MemberAddMode field value if set, zero value otherwise.
func (o *Group) GetMemberAddMode() string {
	if o == nil || IsNil(o.MemberAddMode) {
		var ret string
		return ret
	}
	return *o.MemberAddMode
}

// GetMemberAddModeOk returns a tuple with the MemberAddMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetMemberAddModeOk() (*string, bool) {
	if o == nil || IsNil(o.MemberAddMode) {
		return nil, false
	}
	return o.MemberAddMode, true
}

// HasMemberAddMode returns a boolean if a field has been set.
func (o *Group) HasMemberAddMode() bool {
	if o != nil && !IsNil(o.MemberAddMode) {
		return true
	}

	return false
}

// SetMemberAddMode gets a reference to the given string and assigns it to the MemberAddMode field.
func (o *Group) SetMemberAddMode(v string) {
	o.MemberAddMode = &v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Group) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JID) {
		toSerialize["JID"] = o.JID
	}
	if !IsNil(o.OwnerJID) {
		toSerialize["OwnerJID"] = o.OwnerJID
	}
	if !IsNil(o.Name) {
		toSerialize["Name"] = o.Name
	}
	if !IsNil(o.NameSetAt) {
		toSerialize["NameSetAt"] = o.NameSetAt
	}
	if !IsNil(o.NameSetBy) {
		toSerialize["NameSetBy"] = o.NameSetBy
	}
	if !IsNil(o.Topic) {
		toSerialize["Topic"] = o.Topic
	}
	if !IsNil(o.TopicID) {
		toSerialize["TopicID"] = o.TopicID
	}
	if !IsNil(o.TopicSetAt) {
		toSerialize["TopicSetAt"] = o.TopicSetAt
	}
	if !IsNil(o.TopicSetBy) {
		toSerialize["TopicSetBy"] = o.TopicSetBy
	}
	if !IsNil(o.TopicDeleted) {
		toSerialize["TopicDeleted"] = o.TopicDeleted
	}
	if !IsNil(o.IsLocked) {
		toSerialize["IsLocked"] = o.IsLocked
	}
	if !IsNil(o.IsAnnounce) {
		toSerialize["IsAnnounce"] = o.IsAnnounce
	}
	if !IsNil(o.AnnounceVersionID) {
		toSerialize["AnnounceVersionID"] = o.AnnounceVersionID
	}
	if !IsNil(o.IsEphemeral) {
		toSerialize["IsEphemeral"] = o.IsEphemeral
	}
	if !IsNil(o.DisappearingTimer) {
		toSerialize["DisappearingTimer"] = o.DisappearingTimer
	}
	if !IsNil(o.IsIncognito) {
		toSerialize["IsIncognito"] = o.IsIncognito
	}
	if !IsNil(o.IsParent) {
		toSerialize["IsParent"] = o.IsParent
	}
	if !IsNil(o.DefaultMembershipApprovalMode) {
		toSerialize["DefaultMembershipApprovalMode"] = o.DefaultMembershipApprovalMode
	}
	if !IsNil(o.LinkedParentJID) {
		toSerialize["LinkedParentJID"] = o.LinkedParentJID
	}
	if !IsNil(o.IsDefaultSubGroup) {
		toSerialize["IsDefaultSubGroup"] = o.IsDefaultSubGroup
	}
	if !IsNil(o.IsJoinApprovalRequired) {
		toSerialize["IsJoinApprovalRequired"] = o.IsJoinApprovalRequired
	}
	if !IsNil(o.GroupCreated) {
		toSerialize["GroupCreated"] = o.GroupCreated
	}
	if !IsNil(o.ParticipantVersionID) {
		toSerialize["ParticipantVersionID"] = o.ParticipantVersionID
	}
	if !IsNil(o.Participants) {
		toSerialize["Participants"] = o.Participants
	}
	if !IsNil(o.MemberAddMode) {
		toSerialize["MemberAddMode"] = o.MemberAddMode
	}
	return toSerialize, nil
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


