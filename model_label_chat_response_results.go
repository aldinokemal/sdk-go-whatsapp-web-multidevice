/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the LabelChatResponseResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelChatResponseResults{}

// LabelChatResponseResults struct for LabelChatResponseResults
type LabelChatResponseResults struct {
	Status *string `json:"status,omitempty"`
	Message *string `json:"message,omitempty"`
	ChatJid *string `json:"chat_jid,omitempty"`
	LabelId *string `json:"label_id,omitempty"`
	Labeled *bool `json:"labeled,omitempty"`
}

// NewLabelChatResponseResults instantiates a new LabelChatResponseResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelChatResponseResults() *LabelChatResponseResults {
	this := LabelChatResponseResults{}
	return &this
}

// NewLabelChatResponseResultsWithDefaults instantiates a new LabelChatResponseResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelChatResponseResultsWithDefaults() *LabelChatResponseResults {
	this := LabelChatResponseResults{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *LabelChatResponseResults) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelChatResponseResults) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *LabelChatResponseResults) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *LabelChatResponseResults) SetStatus(v string) {
	o.Status = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *LabelChatResponseResults) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelChatResponseResults) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *LabelChatResponseResults) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *LabelChatResponseResults) SetMessage(v string) {
	o.Message = &v
}

// GetChatJid returns the ChatJid field value if set, zero value otherwise.
func (o *LabelChatResponseResults) GetChatJid() string {
	if o == nil || IsNil(o.ChatJid) {
		var ret string
		return ret
	}
	return *o.ChatJid
}

// GetChatJidOk returns a tuple with the ChatJid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelChatResponseResults) GetChatJidOk() (*string, bool) {
	if o == nil || IsNil(o.ChatJid) {
		return nil, false
	}
	return o.ChatJid, true
}

// HasChatJid returns a boolean if a field has been set.
func (o *LabelChatResponseResults) HasChatJid() bool {
	if o != nil && !IsNil(o.ChatJid) {
		return true
	}

	return false
}

// SetChatJid gets a reference to the given string and assigns it to the ChatJid field.
func (o *LabelChatResponseResults) SetChatJid(v string) {
	o.ChatJid = &v
}

// GetLabelId returns the LabelId field value if set, zero value otherwise.
func (o *LabelChatResponseResults) GetLabelId() string {
	if o == nil || IsNil(o.LabelId) {
		var ret string
		return ret
	}
	return *o.LabelId
}

// GetLabelIdOk returns a tuple with the LabelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelChatResponseResults) GetLabelIdOk() (*string, bool) {
	if o == nil || IsNil(o.LabelId) {
		return nil, false
	}
	return o.LabelId, true
}

// HasLabelId returns a boolean if a field has been set.
func (o *LabelChatResponseResults) HasLabelId() bool {
	if o != nil && !IsNil(o.LabelId) {
		return true
	}

	return false
}

// SetLabelId gets a reference to the given string and assigns it to the LabelId field.
func (o *LabelChatResponseResults) SetLabelId(v string) {
	o.LabelId = &v
}

// GetLabeled returns the Labeled field value if set, zero value otherwise.
func (o *LabelChatResponseResults) GetLabeled() bool {
	if o == nil || IsNil(o.Labeled) {
		var ret bool
		return ret
	}
	return *o.Labeled
}

// GetLabeledOk returns a tuple with the Labeled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LabelChatResponseResults) GetLabeledOk() (*bool, bool) {
	if o == nil || IsNil(o.Labeled) {
		return nil, false
	}
	return o.Labeled, true
}

// HasLabeled returns a boolean if a field has been set.
func (o *LabelChatResponseResults) HasLabeled() bool {
	if o != nil && !IsNil(o.Labeled) {
		return true
	}

	return false
}

// SetLabeled gets a reference to the given bool and assigns it to the Labeled field.
func (o *LabelChatResponseResults) SetLabeled(v bool) {
	o.Labeled = &v
}

func (o LabelChatResponseResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelChatResponseResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.ChatJid) {
		toSerialize["chat_jid"] = o.ChatJid
	}
	if !IsNil(o.LabelId) {
		toSerialize["label_id"] = o.LabelId
	}
	if !IsNil(o.Labeled) {
		toSerialize["labeled"] = o.Labeled
	}
	return toSerialize, nil
}

type NullableLabelChatResponseResults struct {
	value *LabelChatResponseResults
	isSet bool
}

func (v NullableLabelChatResponseResults) Get() *LabelChatResponseResults {
	return v.value
}

func (v *NullableLabelChatResponseResults) Set(val *LabelChatResponseResults) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelChatResponseResults) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelChatResponseResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelChatResponseResults(val *LabelChatResponseResults) *NullableLabelChatResponseResults {
	return &NullableLabelChatResponseResults{value: val, isSet: true}
}

func (v NullableLabelChatResponseResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelChatResponseResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


