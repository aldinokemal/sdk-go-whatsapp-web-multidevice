/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SetGroupAnnounceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SetGroupAnnounceRequest{}

// SetGroupAnnounceRequest struct for SetGroupAnnounceRequest
type SetGroupAnnounceRequest struct {
	// The group ID
	GroupId string `json:"group_id"`
	// Whether to enable announce mode (true) or disable it (false)
	Announce bool `json:"announce"`
}

type _SetGroupAnnounceRequest SetGroupAnnounceRequest

// NewSetGroupAnnounceRequest instantiates a new SetGroupAnnounceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSetGroupAnnounceRequest(groupId string, announce bool) *SetGroupAnnounceRequest {
	this := SetGroupAnnounceRequest{}
	this.GroupId = groupId
	this.Announce = announce
	return &this
}

// NewSetGroupAnnounceRequestWithDefaults instantiates a new SetGroupAnnounceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSetGroupAnnounceRequestWithDefaults() *SetGroupAnnounceRequest {
	this := SetGroupAnnounceRequest{}
	return &this
}

// GetGroupId returns the GroupId field value
func (o *SetGroupAnnounceRequest) GetGroupId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value
// and a boolean to check if the value has been set.
func (o *SetGroupAnnounceRequest) GetGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GroupId, true
}

// SetGroupId sets field value
func (o *SetGroupAnnounceRequest) SetGroupId(v string) {
	o.GroupId = v
}

// GetAnnounce returns the Announce field value
func (o *SetGroupAnnounceRequest) GetAnnounce() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Announce
}

// GetAnnounceOk returns a tuple with the Announce field value
// and a boolean to check if the value has been set.
func (o *SetGroupAnnounceRequest) GetAnnounceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Announce, true
}

// SetAnnounce sets field value
func (o *SetGroupAnnounceRequest) SetAnnounce(v bool) {
	o.Announce = v
}

func (o SetGroupAnnounceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SetGroupAnnounceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group_id"] = o.GroupId
	toSerialize["announce"] = o.Announce
	return toSerialize, nil
}

func (o *SetGroupAnnounceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group_id",
		"announce",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSetGroupAnnounceRequest := _SetGroupAnnounceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSetGroupAnnounceRequest)

	if err != nil {
		return err
	}

	*o = SetGroupAnnounceRequest(varSetGroupAnnounceRequest)

	return err
}

type NullableSetGroupAnnounceRequest struct {
	value *SetGroupAnnounceRequest
	isSet bool
}

func (v NullableSetGroupAnnounceRequest) Get() *SetGroupAnnounceRequest {
	return v.value
}

func (v *NullableSetGroupAnnounceRequest) Set(val *SetGroupAnnounceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSetGroupAnnounceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSetGroupAnnounceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSetGroupAnnounceRequest(val *SetGroupAnnounceRequest) *NullableSetGroupAnnounceRequest {
	return &NullableSetGroupAnnounceRequest{value: val, isSet: true}
}

func (v NullableSetGroupAnnounceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSetGroupAnnounceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


