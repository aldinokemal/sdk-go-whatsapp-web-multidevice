/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LabelChatRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LabelChatRequest{}

// LabelChatRequest struct for LabelChatRequest
type LabelChatRequest struct {
	// Unique identifier for the label
	LabelId string `json:"label_id"`
	// Display name for the label
	LabelName string `json:"label_name"`
	// Whether to apply (true) or remove (false) the label
	Labeled bool `json:"labeled"`
}

type _LabelChatRequest LabelChatRequest

// NewLabelChatRequest instantiates a new LabelChatRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLabelChatRequest(labelId string, labelName string, labeled bool) *LabelChatRequest {
	this := LabelChatRequest{}
	this.LabelId = labelId
	this.LabelName = labelName
	this.Labeled = labeled
	return &this
}

// NewLabelChatRequestWithDefaults instantiates a new LabelChatRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLabelChatRequestWithDefaults() *LabelChatRequest {
	this := LabelChatRequest{}
	return &this
}

// GetLabelId returns the LabelId field value
func (o *LabelChatRequest) GetLabelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LabelId
}

// GetLabelIdOk returns a tuple with the LabelId field value
// and a boolean to check if the value has been set.
func (o *LabelChatRequest) GetLabelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LabelId, true
}

// SetLabelId sets field value
func (o *LabelChatRequest) SetLabelId(v string) {
	o.LabelId = v
}

// GetLabelName returns the LabelName field value
func (o *LabelChatRequest) GetLabelName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LabelName
}

// GetLabelNameOk returns a tuple with the LabelName field value
// and a boolean to check if the value has been set.
func (o *LabelChatRequest) GetLabelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LabelName, true
}

// SetLabelName sets field value
func (o *LabelChatRequest) SetLabelName(v string) {
	o.LabelName = v
}

// GetLabeled returns the Labeled field value
func (o *LabelChatRequest) GetLabeled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Labeled
}

// GetLabeledOk returns a tuple with the Labeled field value
// and a boolean to check if the value has been set.
func (o *LabelChatRequest) GetLabeledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labeled, true
}

// SetLabeled sets field value
func (o *LabelChatRequest) SetLabeled(v bool) {
	o.Labeled = v
}

func (o LabelChatRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LabelChatRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["label_id"] = o.LabelId
	toSerialize["label_name"] = o.LabelName
	toSerialize["labeled"] = o.Labeled
	return toSerialize, nil
}

func (o *LabelChatRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"label_id",
		"label_name",
		"labeled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLabelChatRequest := _LabelChatRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLabelChatRequest)

	if err != nil {
		return err
	}

	*o = LabelChatRequest(varLabelChatRequest)

	return err
}

type NullableLabelChatRequest struct {
	value *LabelChatRequest
	isSet bool
}

func (v NullableLabelChatRequest) Get() *LabelChatRequest {
	return v.value
}

func (v *NullableLabelChatRequest) Set(val *LabelChatRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLabelChatRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLabelChatRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLabelChatRequest(val *LabelChatRequest) *NullableLabelChatRequest {
	return &NullableLabelChatRequest{value: val, isSet: true}
}

func (v NullableLabelChatRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLabelChatRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


