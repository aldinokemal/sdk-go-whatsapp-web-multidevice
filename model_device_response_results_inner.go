/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the DeviceResponseResultsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceResponseResultsInner{}

// DeviceResponseResultsInner struct for DeviceResponseResultsInner
type DeviceResponseResultsInner struct {
	Name *string `json:"name,omitempty"`
	Device *string `json:"device,omitempty"`
}

// NewDeviceResponseResultsInner instantiates a new DeviceResponseResultsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceResponseResultsInner() *DeviceResponseResultsInner {
	this := DeviceResponseResultsInner{}
	return &this
}

// NewDeviceResponseResultsInnerWithDefaults instantiates a new DeviceResponseResultsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceResponseResultsInnerWithDefaults() *DeviceResponseResultsInner {
	this := DeviceResponseResultsInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeviceResponseResultsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceResponseResultsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeviceResponseResultsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeviceResponseResultsInner) SetName(v string) {
	o.Name = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DeviceResponseResultsInner) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceResponseResultsInner) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DeviceResponseResultsInner) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *DeviceResponseResultsInner) SetDevice(v string) {
	o.Device = &v
}

func (o DeviceResponseResultsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceResponseResultsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	return toSerialize, nil
}

type NullableDeviceResponseResultsInner struct {
	value *DeviceResponseResultsInner
	isSet bool
}

func (v NullableDeviceResponseResultsInner) Get() *DeviceResponseResultsInner {
	return v.value
}

func (v *NullableDeviceResponseResultsInner) Set(val *DeviceResponseResultsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceResponseResultsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceResponseResultsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceResponseResultsInner(val *DeviceResponseResultsInner) *NullableDeviceResponseResultsInner {
	return &NullableDeviceResponseResultsInner{value: val, isSet: true}
}

func (v NullableDeviceResponseResultsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceResponseResultsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


