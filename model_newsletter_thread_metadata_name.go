/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 5.4.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the NewsletterThreadMetadataName type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewsletterThreadMetadataName{}

// NewsletterThreadMetadataName struct for NewsletterThreadMetadataName
type NewsletterThreadMetadataName struct {
	Text *string `json:"text,omitempty"`
	Id *string `json:"id,omitempty"`
	UpdateTime *string `json:"update_time,omitempty"`
}

// NewNewsletterThreadMetadataName instantiates a new NewsletterThreadMetadataName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsletterThreadMetadataName() *NewsletterThreadMetadataName {
	this := NewsletterThreadMetadataName{}
	return &this
}

// NewNewsletterThreadMetadataNameWithDefaults instantiates a new NewsletterThreadMetadataName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsletterThreadMetadataNameWithDefaults() *NewsletterThreadMetadataName {
	this := NewsletterThreadMetadataName{}
	return &this
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *NewsletterThreadMetadataName) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterThreadMetadataName) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *NewsletterThreadMetadataName) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *NewsletterThreadMetadataName) SetText(v string) {
	o.Text = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NewsletterThreadMetadataName) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterThreadMetadataName) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NewsletterThreadMetadataName) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NewsletterThreadMetadataName) SetId(v string) {
	o.Id = &v
}

// GetUpdateTime returns the UpdateTime field value if set, zero value otherwise.
func (o *NewsletterThreadMetadataName) GetUpdateTime() string {
	if o == nil || IsNil(o.UpdateTime) {
		var ret string
		return ret
	}
	return *o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterThreadMetadataName) GetUpdateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateTime) {
		return nil, false
	}
	return o.UpdateTime, true
}

// HasUpdateTime returns a boolean if a field has been set.
func (o *NewsletterThreadMetadataName) HasUpdateTime() bool {
	if o != nil && !IsNil(o.UpdateTime) {
		return true
	}

	return false
}

// SetUpdateTime gets a reference to the given string and assigns it to the UpdateTime field.
func (o *NewsletterThreadMetadataName) SetUpdateTime(v string) {
	o.UpdateTime = &v
}

func (o NewsletterThreadMetadataName) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewsletterThreadMetadataName) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.UpdateTime) {
		toSerialize["update_time"] = o.UpdateTime
	}
	return toSerialize, nil
}

type NullableNewsletterThreadMetadataName struct {
	value *NewsletterThreadMetadataName
	isSet bool
}

func (v NullableNewsletterThreadMetadataName) Get() *NewsletterThreadMetadataName {
	return v.value
}

func (v *NullableNewsletterThreadMetadataName) Set(val *NewsletterThreadMetadataName) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsletterThreadMetadataName) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsletterThreadMetadataName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsletterThreadMetadataName(val *NewsletterThreadMetadataName) *NullableNewsletterThreadMetadataName {
	return &NullableNewsletterThreadMetadataName{value: val, isSet: true}
}

func (v NullableNewsletterThreadMetadataName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsletterThreadMetadataName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


