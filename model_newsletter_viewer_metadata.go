/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 5.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
)

// checks if the NewsletterViewerMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewsletterViewerMetadata{}

// NewsletterViewerMetadata struct for NewsletterViewerMetadata
type NewsletterViewerMetadata struct {
	Mute *string `json:"mute,omitempty"`
	Role *string `json:"role,omitempty"`
}

// NewNewsletterViewerMetadata instantiates a new NewsletterViewerMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewsletterViewerMetadata() *NewsletterViewerMetadata {
	this := NewsletterViewerMetadata{}
	return &this
}

// NewNewsletterViewerMetadataWithDefaults instantiates a new NewsletterViewerMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewsletterViewerMetadataWithDefaults() *NewsletterViewerMetadata {
	this := NewsletterViewerMetadata{}
	return &this
}

// GetMute returns the Mute field value if set, zero value otherwise.
func (o *NewsletterViewerMetadata) GetMute() string {
	if o == nil || IsNil(o.Mute) {
		var ret string
		return ret
	}
	return *o.Mute
}

// GetMuteOk returns a tuple with the Mute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterViewerMetadata) GetMuteOk() (*string, bool) {
	if o == nil || IsNil(o.Mute) {
		return nil, false
	}
	return o.Mute, true
}

// HasMute returns a boolean if a field has been set.
func (o *NewsletterViewerMetadata) HasMute() bool {
	if o != nil && !IsNil(o.Mute) {
		return true
	}

	return false
}

// SetMute gets a reference to the given string and assigns it to the Mute field.
func (o *NewsletterViewerMetadata) SetMute(v string) {
	o.Mute = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *NewsletterViewerMetadata) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewsletterViewerMetadata) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *NewsletterViewerMetadata) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *NewsletterViewerMetadata) SetRole(v string) {
	o.Role = &v
}

func (o NewsletterViewerMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewsletterViewerMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mute) {
		toSerialize["mute"] = o.Mute
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

type NullableNewsletterViewerMetadata struct {
	value *NewsletterViewerMetadata
	isSet bool
}

func (v NullableNewsletterViewerMetadata) Get() *NewsletterViewerMetadata {
	return v.value
}

func (v *NullableNewsletterViewerMetadata) Set(val *NewsletterViewerMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableNewsletterViewerMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableNewsletterViewerMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewsletterViewerMetadata(val *NewsletterViewerMetadata) *NullableNewsletterViewerMetadata {
	return &NullableNewsletterViewerMetadata{value: val, isSet: true}
}

func (v NullableNewsletterViewerMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewsletterViewerMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


