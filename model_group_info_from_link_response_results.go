/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
	"time"
)

// checks if the GroupInfoFromLinkResponseResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GroupInfoFromLinkResponseResults{}

// GroupInfoFromLinkResponseResults struct for GroupInfoFromLinkResponseResults
type GroupInfoFromLinkResponseResults struct {
	// The group ID
	GroupId *string `json:"group_id,omitempty"`
	// The group name
	Name *string `json:"name,omitempty"`
	// The group topic/description
	Topic *string `json:"topic,omitempty"`
	// When the group was created
	CreatedAt *time.Time `json:"created_at,omitempty"`
	// Number of participants in the group
	ParticipantCount *int32 `json:"participant_count,omitempty"`
	// Whether the group is locked (only admins can modify group info)
	IsLocked *bool `json:"is_locked,omitempty"`
	// Whether the group is in announce mode (only admins can send messages)
	IsAnnounce *bool `json:"is_announce,omitempty"`
	// Whether the group has disappearing messages enabled
	IsEphemeral *bool `json:"is_ephemeral,omitempty"`
	// Additional description of the group
	Description *string `json:"description,omitempty"`
}

// NewGroupInfoFromLinkResponseResults instantiates a new GroupInfoFromLinkResponseResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupInfoFromLinkResponseResults() *GroupInfoFromLinkResponseResults {
	this := GroupInfoFromLinkResponseResults{}
	return &this
}

// NewGroupInfoFromLinkResponseResultsWithDefaults instantiates a new GroupInfoFromLinkResponseResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupInfoFromLinkResponseResultsWithDefaults() *GroupInfoFromLinkResponseResults {
	this := GroupInfoFromLinkResponseResults{}
	return &this
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *GroupInfoFromLinkResponseResults) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupInfoFromLinkResponseResults) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *GroupInfoFromLinkResponseResults) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *GroupInfoFromLinkResponseResults) SetGroupId(v string) {
	o.GroupId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GroupInfoFromLinkResponseResults) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupInfoFromLinkResponseResults) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GroupInfoFromLinkResponseResults) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GroupInfoFromLinkResponseResults) SetName(v string) {
	o.Name = &v
}

// GetTopic returns the Topic field value if set, zero value otherwise.
func (o *GroupInfoFromLinkResponseResults) GetTopic() string {
	if o == nil || IsNil(o.Topic) {
		var ret string
		return ret
	}
	return *o.Topic
}

// GetTopicOk returns a tuple with the Topic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupInfoFromLinkResponseResults) GetTopicOk() (*string, bool) {
	if o == nil || IsNil(o.Topic) {
		return nil, false
	}
	return o.Topic, true
}

// HasTopic returns a boolean if a field has been set.
func (o *GroupInfoFromLinkResponseResults) HasTopic() bool {
	if o != nil && !IsNil(o.Topic) {
		return true
	}

	return false
}

// SetTopic gets a reference to the given string and assigns it to the Topic field.
func (o *GroupInfoFromLinkResponseResults) SetTopic(v string) {
	o.Topic = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *GroupInfoFromLinkResponseResults) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupInfoFromLinkResponseResults) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *GroupInfoFromLinkResponseResults) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *GroupInfoFromLinkResponseResults) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetParticipantCount returns the ParticipantCount field value if set, zero value otherwise.
func (o *GroupInfoFromLinkResponseResults) GetParticipantCount() int32 {
	if o == nil || IsNil(o.ParticipantCount) {
		var ret int32
		return ret
	}
	return *o.ParticipantCount
}

// GetParticipantCountOk returns a tuple with the ParticipantCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupInfoFromLinkResponseResults) GetParticipantCountOk() (*int32, bool) {
	if o == nil || IsNil(o.ParticipantCount) {
		return nil, false
	}
	return o.ParticipantCount, true
}

// HasParticipantCount returns a boolean if a field has been set.
func (o *GroupInfoFromLinkResponseResults) HasParticipantCount() bool {
	if o != nil && !IsNil(o.ParticipantCount) {
		return true
	}

	return false
}

// SetParticipantCount gets a reference to the given int32 and assigns it to the ParticipantCount field.
func (o *GroupInfoFromLinkResponseResults) SetParticipantCount(v int32) {
	o.ParticipantCount = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *GroupInfoFromLinkResponseResults) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupInfoFromLinkResponseResults) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *GroupInfoFromLinkResponseResults) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *GroupInfoFromLinkResponseResults) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetIsAnnounce returns the IsAnnounce field value if set, zero value otherwise.
func (o *GroupInfoFromLinkResponseResults) GetIsAnnounce() bool {
	if o == nil || IsNil(o.IsAnnounce) {
		var ret bool
		return ret
	}
	return *o.IsAnnounce
}

// GetIsAnnounceOk returns a tuple with the IsAnnounce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupInfoFromLinkResponseResults) GetIsAnnounceOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAnnounce) {
		return nil, false
	}
	return o.IsAnnounce, true
}

// HasIsAnnounce returns a boolean if a field has been set.
func (o *GroupInfoFromLinkResponseResults) HasIsAnnounce() bool {
	if o != nil && !IsNil(o.IsAnnounce) {
		return true
	}

	return false
}

// SetIsAnnounce gets a reference to the given bool and assigns it to the IsAnnounce field.
func (o *GroupInfoFromLinkResponseResults) SetIsAnnounce(v bool) {
	o.IsAnnounce = &v
}

// GetIsEphemeral returns the IsEphemeral field value if set, zero value otherwise.
func (o *GroupInfoFromLinkResponseResults) GetIsEphemeral() bool {
	if o == nil || IsNil(o.IsEphemeral) {
		var ret bool
		return ret
	}
	return *o.IsEphemeral
}

// GetIsEphemeralOk returns a tuple with the IsEphemeral field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupInfoFromLinkResponseResults) GetIsEphemeralOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEphemeral) {
		return nil, false
	}
	return o.IsEphemeral, true
}

// HasIsEphemeral returns a boolean if a field has been set.
func (o *GroupInfoFromLinkResponseResults) HasIsEphemeral() bool {
	if o != nil && !IsNil(o.IsEphemeral) {
		return true
	}

	return false
}

// SetIsEphemeral gets a reference to the given bool and assigns it to the IsEphemeral field.
func (o *GroupInfoFromLinkResponseResults) SetIsEphemeral(v bool) {
	o.IsEphemeral = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *GroupInfoFromLinkResponseResults) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GroupInfoFromLinkResponseResults) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *GroupInfoFromLinkResponseResults) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *GroupInfoFromLinkResponseResults) SetDescription(v string) {
	o.Description = &v
}

func (o GroupInfoFromLinkResponseResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GroupInfoFromLinkResponseResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Topic) {
		toSerialize["topic"] = o.Topic
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.ParticipantCount) {
		toSerialize["participant_count"] = o.ParticipantCount
	}
	if !IsNil(o.IsLocked) {
		toSerialize["is_locked"] = o.IsLocked
	}
	if !IsNil(o.IsAnnounce) {
		toSerialize["is_announce"] = o.IsAnnounce
	}
	if !IsNil(o.IsEphemeral) {
		toSerialize["is_ephemeral"] = o.IsEphemeral
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	return toSerialize, nil
}

type NullableGroupInfoFromLinkResponseResults struct {
	value *GroupInfoFromLinkResponseResults
	isSet bool
}

func (v NullableGroupInfoFromLinkResponseResults) Get() *GroupInfoFromLinkResponseResults {
	return v.value
}

func (v *NullableGroupInfoFromLinkResponseResults) Set(val *GroupInfoFromLinkResponseResults) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupInfoFromLinkResponseResults) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupInfoFromLinkResponseResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupInfoFromLinkResponseResults(val *GroupInfoFromLinkResponseResults) *NullableGroupInfoFromLinkResponseResults {
	return &NullableGroupInfoFromLinkResponseResults{value: val, isSet: true}
}

func (v NullableGroupInfoFromLinkResponseResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupInfoFromLinkResponseResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


