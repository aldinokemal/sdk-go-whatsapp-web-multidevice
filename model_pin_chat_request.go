/*
WhatsApp API MultiDevice

This API is used for sending whatsapp via API

API version: 6.9.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package SdkWhatsappWebMultiDevice

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PinChatRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PinChatRequest{}

// PinChatRequest struct for PinChatRequest
type PinChatRequest struct {
	// Whether to pin (true) or unpin (false) the chat
	Pinned bool `json:"pinned"`
}

type _PinChatRequest PinChatRequest

// NewPinChatRequest instantiates a new PinChatRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPinChatRequest(pinned bool) *PinChatRequest {
	this := PinChatRequest{}
	this.Pinned = pinned
	return &this
}

// NewPinChatRequestWithDefaults instantiates a new PinChatRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPinChatRequestWithDefaults() *PinChatRequest {
	this := PinChatRequest{}
	return &this
}

// GetPinned returns the Pinned field value
func (o *PinChatRequest) GetPinned() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Pinned
}

// GetPinnedOk returns a tuple with the Pinned field value
// and a boolean to check if the value has been set.
func (o *PinChatRequest) GetPinnedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Pinned, true
}

// SetPinned sets field value
func (o *PinChatRequest) SetPinned(v bool) {
	o.Pinned = v
}

func (o PinChatRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PinChatRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["pinned"] = o.Pinned
	return toSerialize, nil
}

func (o *PinChatRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pinned",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPinChatRequest := _PinChatRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPinChatRequest)

	if err != nil {
		return err
	}

	*o = PinChatRequest(varPinChatRequest)

	return err
}

type NullablePinChatRequest struct {
	value *PinChatRequest
	isSet bool
}

func (v NullablePinChatRequest) Get() *PinChatRequest {
	return v.value
}

func (v *NullablePinChatRequest) Set(val *PinChatRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePinChatRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePinChatRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePinChatRequest(val *PinChatRequest) *NullablePinChatRequest {
	return &NullablePinChatRequest{value: val, isSet: true}
}

func (v NullablePinChatRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePinChatRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


